# -*- coding: utf-8 -*-
"""hotel (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YFiukXxH6VbWtl4QdLxGKRkyBtvLNl8g
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from itertools import combinations
from scipy import stats

df=pd.read_csv('customer_churn_data_more_missing.csv',index_col='CustomerID')
df.head()

df.info()

df.shape

df.isnull().sum()

df.duplicated().sum()



df[['MonthlyCharges','ServiceUsage']].corr()

F_float=df.select_dtypes(include='float').columns.tolist()
F_float

df_float=df.select_dtypes(include='float')
df_float

df[['MonthlyCharges', 'ServiceUsage', 'Age', 'TotalTransactions', 'Churn']].corr()

"""EDA"""

for i in F_float:
    plt.figure(figsize=(6,4))
    sns.histplot(df[i],kde=True)
    plt.title(f'PDF of {i}')
    plt.xlabel(i)
    plt.ylabel("Frequency")
    plt.show()

for i in F_float:
    skew=df[i].skew()
    print(f'The skewness of {i} is {skew}')

F_object=df.select_dtypes(include='object').columns.tolist()
F_object

df_object=df.select_dtypes(include='object')
df_object

for i in F_float:
    plt.figure(figsize=(6,4))
    sns.boxplot(df[i])
    plt.title(f'Boxplot of {i}')
    plt.xlabel(i)
    plt.show()

df_float=df_float.dropna()

sns.pairplot(df_float, hue="Churn")

for i, j in combinations(df_object.columns, 2):
    plt.figure(figsize=(20,4))
    crosstab = pd.crosstab(df[i], df[j])
    print(f"\nCrosstab between {i} and {j}:\n")
    print(crosstab)
    sns.heatmap(pd.crosstab(df[i],df[j]))

sns.heatmap(pd.crosstab(df['SubscriptionType'],df['Gender']))

df.info()

df.head()

x=df.iloc[:,0:7]
x.head()

y=df.iloc[:,-1:]
y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

x_train.head()

df['SubscriptionType'].isnull().sum()

df['SubscriptionType'].value_counts()

df['SubscriptionType'].isnull().sum()

df['SubscriptionType'].fillna(df['Gender'].mode())

df['SubscriptionType'] = df['SubscriptionType'].fillna(df['SubscriptionType'].mode()[0])
df['SubscriptionType'].isnull().sum()
df.isnull().sum()

x=df.iloc[:,0:7]
y=df.iloc[:,-1:]

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

df['SubscriptionType'].value_counts()

x_train.isnull().sum()

from sklearn.preprocessing import OrdinalEncoder
oe=OrdinalEncoder(categories=[['Basic','Standard','Premium']])
x_train['SubscriptionType']=oe.fit_transform(x_train[['SubscriptionType']])
x_test['SubscriptionType']=oe.fit(x_test[['SubscriptionType']])

oe.categories

x_train

"""#ONE HOT ENCODING

"""

x=df.iloc[:,0:7]
y=df.iloc[:,-1:]
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

df['Gender'].isnull().sum()

df['Gender']=df['Gender'].fillna(df['Gender'].mode()[0])

df['Gender'].isnull().sum()

df['Gender'].value_counts()

from sklearn.preprocessing import OneHotEncoder
ohe=OneHotEncoder()
x_train_ohe=ohe.fit_transform(x_train[['Gender']]).toarray()
x_test_ohe=ohe.transform(x_test[['Gender']]).toarray()

x_train_ohe

x_new = np.hstack([x_train[['Gender']].values, x_train_ohe])
x_new

"""#column Trasformer"""

x=df.iloc[:,0:7]
y=df.iloc[:,-1:]
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

from sklearn.compose import ColumnTransformer
trf=ColumnTransformer(
    transformers=[
        ('trf1',OrdinalEncoder(categories=[['Basic','Standard','Premium']]),['SubscriptionType']),
        ('trf2',OneHotEncoder(sparse_output=False,drop='first'),['Gender'])
    ],
    remainder='passthrough')

x_train_trf=trf.fit_transform(x_train)
x_test_trf=trf.transform(x_test)

"""feature_names = trf.get_feature_names_out()

x_train_trf= pd.DataFrame(x_train_trf, columns=feature_names, index=x_train.index)

x_train_trf
"""

x_train_trf

features_name=trf.get_feature_names_out()
x_train_trf=pd.DataFrame(x_train_trf,columns=features_name,index=x_train.index)

x_train_trf

"""FUNCTION TRANSFORMATION"""

x=df.iloc[:,0:7]
y=df.iloc[:,-1:]
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

df_float

for i in F_float:
    plt.figure(figsize=(6,4))
    sns.histplot(df[i].dropna(),kde=True)
    plt.title(f'PDF of {i}')
    plt.xlabel(i)
    plt.ylabel("Frequency")
    plt.show()

from sklearn.preprocessing import FunctionTransformer
ftr=FunctionTransformer(func=np.log1p)
x_train_ftr=ftr.fit_transform(x_train['MonthlyCharges'])
x_test_ftr=ftr.transform(x_test['MonthlyCharges'])

plt.figure(figsize=(14,8))

plt.subplot(221)
sns.histplot(x_train['MonthlyCharges'],kde=True)
plt.xlabel('Pdf of  before function transformation Monthly charges')


plt.subplot(222)
stats.probplot(x_train['MonthlyCharges'].dropna(),dist="norm",plot=plt)
plt.xlabel('Probplot of Monthly charges')
plt.title('Probplot of  before function transformation Monthly charges')


plt.subplot(223)
sns.histplot(x_train_ftr,kde=True)
plt.xlabel('Pdf of AFter FUnctionTransfromation of Monthly charges')


plt.subplot(224)
stats.probplot(x_train_ftr.dropna(),dist="norm",plot=plt)
plt.xlabel('Probplot of AFter FUnctionTransfromation of Monthly charges')



plt.show()

from sklearn.preprocessing import FunctionTransformer
ftr=FunctionTransformer(func=np.log1p)
x_train_ftr_tt=ftr.fit_transform(x_train['TotalTransactions'])
x_test_ftr_tt=ftr.transform(x_test['TotalTransactions'])

plt.figure(figsize=(14,12))

plt.subplot(221)
sns.histplot(x_train['TotalTransactions'],kde=True)
plt.xlabel('Pdf of AFter FUnctionTransfromation of TotalTransactions')


plt.subplot(222)
stats.probplot(x_train['TotalTransactions'].dropna(),dist="norm",plot=plt)
plt.xlabel('Probplot of AFter FUnctionTransfromation of TotalTransactions')
plt.title('Probplot of AFter FUnctionTransfromation of TotalTransactions')



plt.subplot(223)
sns.histplot(x_train_ftr_tt,kde=True)
plt.xlabel('Pdf of AFter FUnctionTransfromation of TotalTransactions')


plt.subplot(224)
stats.probplot(x_train_ftr_tt.dropna(),dist="norm",plot=plt)
plt.xlabel('Probplot of AFter FUnctionTransfromation of TotalTransactions')
plt.title('Probplot of AFter FUnctionTransfromation of TotalTransactions')


plt.show()

df['ContractEndDate']=pd.to_datetime(df['ContractEndDate'])

year=df['ContractEndDate'].dt.year

year.shape

dayofweek=df['ContractEndDate'].dt.dayofweek
dayofweek.head()

"""KNN IMPUTER"""

x_train.isnull().sum()

from sklearn.impute import KNNImputer
knn=KNNImputer()
x_train[['MonthlyCharges', 'ServiceUsage', 'Age', 'TotalTransactions']]=knn.fit_transform(x_train[['MonthlyCharges', 'ServiceUsage', 'Age', 'TotalTransactions']])

x_train

x_train.info()

x_train.dropna()

from sklearn.preprocessing import FunctionTransformer
ftr=FunctionTransformer(func=np.log1p)
x_train_ftr_tt=ftr.fit_transform(x_train['TotalTransactions'])
x_test_ftr_tt=ftr.transform(x_test['TotalTransactions'])

x_train_ftr_tt.isnull().sum()

plt.figure(figsize=(14,12))

plt.subplot(221)
sns.histplot(x_train['TotalTransactions'],kde=True)
plt.xlabel('Pdf of AFter FUnctionTransfromation of TotalTransactions')


plt.subplot(222)
stats.probplot(x_train['TotalTransactions'].dropna(),dist="norm",plot=plt)
plt.xlabel('Probplot of AFter FUnctionTransfromation of TotalTransactions')
plt.title('Probplot of AFter FUnctionTransfromation of TotalTransactions')



plt.subplot(223)
sns.histplot(x_train_ftr_tt,kde=True)
plt.xlabel('Pdf of AFter FUnctionTransfromation of TotalTransactions')


plt.subplot(224)
stats.probplot(x_train_ftr_tt.dropna(),dist="norm",plot=plt)
plt.xlabel('Probplot of AFter FUnctionTransfromation of TotalTransactions')
plt.title('Probplot of AFter FUnctionTransfromation of TotalTransactions')


plt.show()

from sklearn.preprocessing import FunctionTransformer
ftr=FunctionTransformer(func=np.log1p)
x_train_ftr=ftr.fit_transform(x_train['MonthlyCharges'])
x_test_ftr=ftr.transform(x_test['MonthlyCharges'])

plt.figure(figsize=(14,8))

plt.subplot(221)
sns.histplot(x_train['MonthlyCharges'],kde=True)
plt.xlabel('Pdf of  before function transformation Monthly charges')


plt.subplot(222)
stats.probplot(x_train['MonthlyCharges'].dropna(),dist="norm",plot=plt)
plt.xlabel('Probplot of Monthly charges')
plt.title('Probplot of  before function transformation Monthly charges')


plt.subplot(223)
sns.histplot(x_train_ftr,kde=True)
plt.xlabel('Pdf of AFter FUnctionTransfromation of Monthly charges')


plt.subplot(224)
stats.probplot(x_train_ftr.dropna(),dist="norm",plot=plt)
plt.xlabel('Probplot of AFter FUnctionTransfromation of Monthly charges')



plt.show()

for i in F_float:
    plt.figure(figsize=(6,4))
    sns.boxplot(df[i])
    plt.title(f'Boxplot of {i}')
    plt.xlabel(i)
    plt.show()

"""DETECTION OF OUTLIERS

1. NORMAL DISTRIBUTION
"""

x_train[['MonthlyCharges']].mean()

x_train['MonthlyCharges']

mean = x_train['MonthlyCharges'].mean()
std = x_train['MonthlyCharges'].std()


max_val = mean + 3 * std
min_val = mean - 3 * std

outliers = x_train[(x_train['MonthlyCharges'] > max_val) | (x_train['MonthlyCharges'] < min_val)]

max_val

outliers.shape

x_train_new=x_train[(x_train['MonthlyCharges']<max_val) & (x_train['MonthlyCharges']>min_val)]

x_train_new.isnull().sum()

x_train_new['ContractEndDate']=x_train_new['ContractEndDate'].fillna(x_train_new['ContractEndDate'].mode()[0])

x_train_new.isnull().sum()

sns.boxplot(x_train_new['MonthlyCharges'])



sns.boxplot(x_train['MonthlyCharges'])

cols_to_check = ['MonthlyCharges', 'ServiceUsage', 'Age', 'TotalTransactions']


mean = x_train[cols_to_check].mean()
std = x_train[cols_to_check].std()


max_val = mean + 3 * std
min_val = mean - 3 * std


outlier_mask = (x_train[cols_to_check] > max_val) | (x_train[cols_to_check] < min_val)


outliers = x_train[outlier_mask.any(axis=1)]

print(outliers)

x_train_new_float=x_train_new.select_dtypes(include='float')

from sklearn.decomposition import PCA
pca=PCA(n_components=3)
x_train_pca=pca.fit_transform(x_train_new_float)

x_train_pca

split this into py files to make a pipeline main for github